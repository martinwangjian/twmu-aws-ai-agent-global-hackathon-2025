[project]
name = "aws-ai-agent-booking-bot"
version = "0.1.0"
description = "AI-powered booking assistant using AWS Bedrock and Strands Agents"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "strands-agents[a2a]>=1.0.0",
    "strands-agents-tools>=0.2.0",
    "bedrock-agentcore>=0.1.0",
    "boto3>=1.35.0",
    "pydantic>=2.0.0",
    "mcp>=1.0.0",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.0.0",
    "diagrams>=0.24.4",
    "bedrock-agentcore-starter-toolkit>=0.1.21",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-bdd>=7.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "requests>=2.31.0",
    "google-api-python-client>=2.0.0",
    "google-auth>=2.0.0",
    # Type stubs
    "boto3-stubs[bedrock-runtime]>=1.35.0",
    "types-requests>=2.31.0",
]

cdk = [
    "aws-cdk-lib>=2.100.0",
    "constructs>=10.0.0",
]

lambda-runtime = [
    "boto3>=1.34.0",
    "aws-xray-sdk>=2.12.0",
]

[tool.uv]
dev-dependencies = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

[tool.ruff]
# Python version
target-version = "py311"

# Line length
line-length = 100

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "cdk.out",
    ".aws-sam",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "S",      # flake8-bandit (security)
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "DTZ",    # flake8-datetimez
    "ERA",    # eradicate (commented code)
    "PL",     # pylint
    "PERF",   # perflint
]

# Ignore specific rules
ignore = [
    "S101",   # assert - allowed in tests
    "PLR0913", # too many arguments
    "PLR2004", # magic values
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, etc.
"tests/**/*.py" = ["S101", "PLR2004", "ARG"]
"test_*.py" = ["S101", "PLR2004", "ARG"]
# CLI scripts can use print statements
"src/agents/agentcore_mcp_agent.py" = ["T201"]
"scripts/test_memory.py" = ["T201", "DTZ005"]
"lambda/whatsapp_orchestrator.py" = ["ARG001", "DTZ003", "PLC0415"]

[tool.ruff.format]
# Use double quotes
quote-style = "double"

# Indent with spaces
indent-style = "space"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "strands_agents.*",
    "aws_cdk.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"
